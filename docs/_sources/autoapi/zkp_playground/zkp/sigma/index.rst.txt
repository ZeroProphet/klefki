:mod:`zkp_playground.zkp.sigma`
=======================

.. py:module:: zkp_playground.zkp.sigma


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   zkp_playground.zkp.sigma.NIZK
   zkp_playground.zkp.sigma.Sigma



.. py:class:: NIZK

   Bases: :class:`abc.ABCMeta`

   Metaclass for defining Abstract Base Classes (ABCs).

   Use this metaclass to create an ABC.  An ABC can be subclassed
   directly, and then acts as a mix-in class.  You can also register
   unrelated concrete classes (even built-in classes) and unrelated
   ABCs as 'virtual subclasses' -- these and their descendants will
   be considered subclasses of the registering ABC by the built-in
   issubclass() function, but the registering ABC won't show up in
   their MRO (Method Resolution Order) nor will method
   implementations defined by the registering ABC be callable (not
   even via super()).

   .. method:: callange(self, *args, **kwargs)
      :abstractmethod:


   .. method:: verify(self, *args, **kwargs)
      :abstractmethod:



.. py:class:: Sigma

   Bases: :class:`zkp_playground.zkp.sigma.NIZK`

   Metaclass for defining Abstract Base Classes (ABCs).

   Use this metaclass to create an ABC.  An ABC can be subclassed
   directly, and then acts as a mix-in class.  You can also register
   unrelated concrete classes (even built-in classes) and unrelated
   ABCs as 'virtual subclasses' -- these and their descendants will
   be considered subclasses of the registering ABC by the built-in
   issubclass() function, but the registering ABC won't show up in
   their MRO (Method Resolution Order) nor will method
   implementations defined by the registering ABC be callable (not
   even via super()).

   .. method:: proof(self, *args, **kwargs)
      :abstractmethod:


   .. method:: callange(self, *args, **kwargs)
      :abstractmethod:


   .. method:: verify(self, *args, **kwargs)
      :abstractmethod:



