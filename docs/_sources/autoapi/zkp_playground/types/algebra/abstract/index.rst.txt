:mod:`zkp_playground.types.algebra.abstract`
====================================

.. py:module:: zkp_playground.types.algebra.abstract


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   zkp_playground.types.algebra.abstract.Functor
   zkp_playground.types.algebra.abstract.Groupoid
   zkp_playground.types.algebra.abstract.SemiGroup
   zkp_playground.types.algebra.abstract.Monoid
   zkp_playground.types.algebra.abstract.Group
   zkp_playground.types.algebra.abstract.Field



.. py:class:: Functor(*args)

   .. attribute:: __slots__
      :annotation: = ['value']

      

   .. method:: construct(cls, name, **kwargs)
      :classmethod:


   .. method:: fmap(self, o)


   .. method:: functor(self)
      :property:


   .. method:: id(self)



.. py:class:: Groupoid(*args)

   Bases: :class:`zkp_playground.types.algebra.abstract.Functor`

   .. attribute:: __slots__
      :annotation: = []

      

   .. method:: op(self, g: Group) -> 'Group'
      :abstractmethod:


   .. method:: __eq__(self, b) -> bool

      Return self==value.


   .. method:: __lt__(self, b) -> bool

      Return self<value.


   .. method:: __le__(self, b) -> bool

      Return self<=value.


   .. method:: __gt__(self, b) -> bool

      Return self>value.


   .. method:: __ge__(self, b) -> bool

      Return self>=value.


   .. method:: __add__(self, g: Group) -> 'Group'

      Allowing call associativity operator via A + B
      Strict limit arg `g` and ret `res` should be subtype of Group,
      For obeying axiom `closure` (1)


   .. method:: __radd__(self, g)


   .. method:: __mul__(self, g: Group) -> 'Group'


   .. method:: __repr__(self)

      Return repr(self).


   .. method:: __str__(self)

      Return str(self).



.. py:class:: SemiGroup(*args)

   Bases: :class:`zkp_playground.types.algebra.abstract.Groupoid`

   .. attribute:: __slots__
      :annotation: = []

      

   .. method:: op(self, g: Group) -> 'Group'
      :abstractmethod:

      The Operator for obeying axiom `associativity` (2)



.. py:class:: Monoid(*args)

   Bases: :class:`zkp_playground.types.algebra.abstract.SemiGroup`

   .. attribute:: __slots__
      :annotation: = []

      

   .. method:: identity(self)
      :property:

      The value for obeying axiom `identity` (3)


   .. method:: __not__(self)


   .. method:: scalar(self, times)


   .. method:: __matmul__(self, times)


   .. method:: __pow__(self, times) -> 'Group'


   .. method:: __xor__(self, times) -> 'Group'



.. py:class:: Group(*args)

   Bases: :class:`zkp_playground.types.algebra.abstract.Monoid`

   .. attribute:: __slots__
      :annotation: = []

      

   .. method:: inverse(self: Group) -> 'Group'
      :abstractmethod:

      Implement for axiom `inverse`


   .. method:: __sub__(self, g: Group) -> 'Group'

      Allow to reverse op via a - b


   .. method:: __neg__(self) -> 'Group'



.. py:class:: Field(*args)

   Bases: :class:`zkp_playground.types.algebra.abstract.Group`

   .. attribute:: __slots__
      :annotation: = []

      

   .. method:: sec_op(self, g: Field) -> 'Field'
      :abstractmethod:

      The Operator for obeying axiom `associativity` (2)


   .. method:: sec_inverse(self) -> 'Field'
      :abstractmethod:

      Implement for axiom `inverse`


   .. method:: sec_identity(self)
      :abstractmethod:


   .. method:: __invert__(self)


   .. method:: __mul__(self, g: Field) -> 'Field'

      Allowing call associativity operator via A * B
      Strict limit arg `g` and ret `res` should be subtype of Group,
      For obeying axiom `closure` (1)


   .. method:: __pow__(self, b, m=None)


   .. method:: __truediv__(self, g: Field) -> 'Field'



