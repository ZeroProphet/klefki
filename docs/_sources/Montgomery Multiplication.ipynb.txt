{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Montgomery Multiplication\n",
    "=========\n",
    "\n",
    "ref: http://koclab.cs.ucsb.edu/teaching/cs154/docx/Notes7-Montgomery.pdf"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let the modulus $n$ be a k-bit integer(i.e. $n \\in [2^{k-1}, 2^k)$, and let $r$ be $2^k$. The Montgomery multiplication algorithm requires that $r$ and $n$ be relatively prime ($gcd(n, r)=1)$ This requirement is satisfed if $n$ is odd."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "we first defined the $n$-residue of an integer $a<n$ as $\\bar{a} = a. r (mod\\ n)$. It is straightforward to show that the set\n",
    "\n",
    "$$\n",
    "{a.r \\mod n | a \\in [0,n-1]}\n",
    "$$\n",
    "\n",
    "is a complete residue system."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Given two $n$-residues $\\bar{a}$ and $\\bar{b}$, the Montgomery product is defined as the $n$-residue\n",
    "\n",
    "$$\n",
    "\\bar{c} = \\bar{a}.\\bar{b}.r^{-1} (mod\\ n)\n",
    "$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "where $r^{-1}$ is the inverse of r modulo $n$, i.e, it is the number with the property $r^{-1}.r=1 (mod\\ n)$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\\begin{aligned}\n",
    "\\bar{c}&=\\bar{a}.\\bar{b}.r^{-1} &(mod\\ n)\\\\\n",
    "       &=a.r.b.r.r^{-1} &(mod\\ n)\\\\\n",
    "       &=c.r &(mod\\ n)\n",
    "\\end{aligned}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "from zkp_playground.curves.secp256k1 import FiniteFieldSecp256k1  as F\n",
    "from zkp_playground.numbers import invmod\n",
    "from math import ceil"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "n = F.P\n",
    "r = 2 ** (n.bit_length() +1)\n",
    "a = 12312312312123123121123123123121313131313123112312323131313131231123123\n",
    "\n",
    "b = 12312318080776531123121231212123131313131231123123333123123123123123\n",
    "assert a < n\n",
    "assert b < n\n",
    "\n",
    "a_ = a * r % n\n",
    "b_ = b * r % n\n",
    "r_inv = invmod(r, n)\n",
    "c_ = a_ * b_ * r_inv % n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "256"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "n.bit_length()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a*b*r % n == c_"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In order to describe the Montgomery reduction algorithm, we need an additional quantity $n'$, which is the  integer with the property \n",
    "\n",
    "$$\n",
    "r.r^{-1}-n.n'\n",
    "$$\n",
    "\n",
    "The integers $r^{-1}$ and $n'$ can both be computed by the extened Euclidean algorithm. \n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$n'=(r.r^{-1}-1)/n$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "n_ = (r * r_inv -1) // n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "assert r * r_inv % n == 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "assert (r*r_inv - n * n_) == 1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The computation of MonPro($\\bar{a}, \\bar{b})$ is achieved as follows:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "*function* MonPro($\\bar{a}, \\bar{b})$\n",
    "\n",
    "Step 1. $t:=\\bar{a}.\\bar{b}$\n",
    "\n",
    "Step 2. $m=t.n'\\ mod \\ r$\n",
    "\n",
    "Step 3. $\\bar{u}:=(t+m.n)/r$\n",
    "\n",
    "Step 4. *if* $\\bar{u}\\ge n$ *then return* $\\bar{u}-n$ *else return* $\\bar{u}$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "def mon_pro(a_, b_, r, n):\n",
    "    t = a_ * b_\n",
    "    m = (t * n_) % r\n",
    "    u_ = (t + m * n) // r\n",
    "    if u_ >= n:\n",
    "         return u_ - n\n",
    "    else:\n",
    "        return u_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "assert mon_pro(a_, b_, r, n) == c_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "def mon_mul(a, b, n):\n",
    "    r = 2 ** (n.bit_length() +1)\n",
    "    a_ = (a * r) % n\n",
    "    b_ = (b * r) % n\n",
    "    u_ = mon_pro(a_, b_, r, n)\n",
    "    return mon_pro(u_, 1, r, n)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "assert mon_mul(a, b, n) == a * b % n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## zkp_playground.algorithms.montgomery_mul"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "import random\n",
    "from time import time\n",
    "from zkp_playground.algorithms import montgomery_mul"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "from zkp_playground.curves.secp256k1 import FiniteFieldSecp256k1  as F\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "dataset = [(random.randint(0, F.P), random.randint(0, F.P)) for i in range(1000000)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "def banchmark_origin():\n",
    "    start = time()\n",
    "    for (a, b) in dataset:\n",
    "        (a * b) % F.P\n",
    "    end = time()\n",
    "    return end - start"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "def banchmark_zkp_playground():\n",
    "    start = time()\n",
    "    for (a, b) in dataset:\n",
    "        montgomery_mul(a, b, F.P)\n",
    "    end = time()\n",
    "    return end - start"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7404918670654297"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "banchmark_origin()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5.889930009841919"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "banchmark_zkp_playground()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## CIOS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "from math import ceil\n",
    "from zkp_playground.numbers import invmod\n",
    "\n",
    "def CIOS(a, b, P):\n",
    "    \"\"\"\n",
    "    # a[i], b[i], q[i] is the ith word of the numbers a,b,q\n",
    "    # N is the number of machine words needed to store the modulus q\n",
    "    Ref: https://hackmd.io/@zkteam/modular_multiplication\n",
    "         https://www.microsoft.com/en-us/research/wp-content/uploads/1998/06/97Acar.pdf\n",
    "    \"\"\"\n",
    "    s = int(ceil(P.bit_length() / 8))\n",
    "    a = a.to_bytes(s, \"little\")\n",
    "    b = b.to_bytes(s, \"little\")\n",
    "    n = P.to_bytes(s, \"little\")\n",
    "    R = 2 ** (P.bit_length() + 1)\n",
    "    w = 8\n",
    "    W = 2 ** w\n",
    "\n",
    "    n_0 = list(invmod(-P, R).to_bytes(s, \"little\"))[0]\n",
    "    # t is a temporary array of size N+2\n",
    "    t = [0] * (s + 2)\n",
    "    \n",
    "    for i in range(0, s):\n",
    "        C = 0\n",
    "        for j in range(0, s):\n",
    "            (C, S) = (t[j] + a[j] * b[i] + C).to_bytes(2, \"big\")\n",
    "            t[j] = S\n",
    "        (C, S) = (t[s] + C).to_bytes(2, \"big\")\n",
    "        t[s] = S\n",
    "        t[s+1] = C\n",
    "\n",
    "        C = 0\n",
    "        m = t[0] * n_0 % W\n",
    "\n",
    "        C = (t[0] + m * n_0) // 256\n",
    "        for j in range(1, s):\n",
    "            (C, S) = (t[j] + m * n[j] + C).to_bytes(2, \"big\")\n",
    "            t[j-1] = S\n",
    "    \n",
    "        (C, S) = (t[s] + C).to_bytes(2, \"big\")\n",
    "        t[s-1] = S\n",
    "        t[s] = t[s+1] + C\n",
    "    \n",
    "    return t\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[34,\n",
       " 232,\n",
       " 49,\n",
       " 127,\n",
       " 108,\n",
       " 71,\n",
       " 149,\n",
       " 179,\n",
       " 55,\n",
       " 164,\n",
       " 169,\n",
       " 230,\n",
       " 9,\n",
       " 86,\n",
       " 174,\n",
       " 177,\n",
       " 129,\n",
       " 252,\n",
       " 95,\n",
       " 224,\n",
       " 119,\n",
       " 26,\n",
       " 75,\n",
       " 49,\n",
       " 12,\n",
       " 7,\n",
       " 122,\n",
       " 109,\n",
       " 178,\n",
       " 129,\n",
       " 24,\n",
       " 37,\n",
       " 0,\n",
       " 0]"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "CIOS(1, 2, n)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "115792089237316195423570985008687907853269984665640564039457584007908834671663"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[107, 136, 238, 131, 154]"
      ]
     },
     "execution_count": 147,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "list(montgomery_mul(a, b, n).to_bytes(32, \"big\")[-5:])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 148,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "43167161778048652321975400068475845729647908398586054228854005856267837326874"
      ]
     },
     "execution_count": 148,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mon_pro(a_, b_, r, n)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 154,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "43167161778048652321975400068475845729647908398586054228854005856267837326874"
      ]
     },
     "execution_count": 154,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mon_mul(a, b_, n)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
