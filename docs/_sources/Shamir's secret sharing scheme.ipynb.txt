{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Shamir's secret sharing scheme\n",
    "========================="
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* ref https://en.wikipedia.org/wiki/Shamir%27s_Secret_Sharing"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The essential idea of Adi Shamir's threshold scheme is that 2 points are sufficient to define a line, 3 points are sufficient to define a parabola, 4 points to define a cubic curve and so forth. That is, it takes $k$ points to define a polynomial of degree $k-1$. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Suppose we want to use a $( k , n )$ , threshold scheme to share our secret $S_{size}$, without loss of generality assumed to be an element in a finite field $\\mathbb{Z}_p$ of size $P$ where \n",
    "\n",
    "$$\n",
    "0 < k â‰¤ n < P; S < P; P \\in \\mathbb{P}\n",
    "$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Choose at random $k-1$ positive integers $a_1,\\cdots, a_{k-1}$ with$a_i < P$, and let $a_0=S$. Build the polynomial \n",
    "\n",
    "$$\n",
    "f(x)=a_0+a_1x+a_2x^2+\\cdots+a_{k-1}x^{k-1}\n",
    "$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let us construct any $n$ points out of it, for instance set $i=1,\\cdots, n$ to retrive $(i, f(i))$. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Every participant is given a point (a non-zero integer input to the polynomial, and the corresponding integer output) along with the prime which defines the finite field to use. Given any subset of $k$ of these pairs, we can find the coefficients of the polynomial using interpolation. The secret is the constant term $a_0$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## SSSS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "from zkp_playground.const import SECP256K1_P as P\n",
    "from zkp_playground.types.algebra.meta import field\n",
    "from operator import add\n",
    "\n",
    "import random\n",
    "\n",
    "N = 0xFFFFF\n",
    "random_f = lambda: CF(random.randint(1, N) % CF.P)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "from operator import mul"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "from functools import reduce\n",
    "from operator import add\n",
    "\n",
    "(k, n) = (66, 99)\n",
    "CF = field(P)\n",
    "S = random_f()\n",
    "P = CF.P"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "assert 0 < k <= n < P"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "a = [random_f() for _ in range(k-1)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "f = lambda x: S + reduce(\n",
    "    add, [CF(a[i]) * CF((x ** i)) for i in range(1, k - 1 )])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "rand = lambda: CF(random.randint(1, CF.P))\n",
    "\n",
    "x = [CF(rand()) for _ in range(k)]\n",
    "assert len(x) == k"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "ret = lambda x: reduce(add, [f(x[j]) * reduce(mul, \n",
    "    [x[m] / (x[m]-x[j])for m in range(k-1) if m != j]) for j in range(k-1)])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ret([CF(rand()) for _ in range(k+20)]) == ret([CF(rand()) for _ in range(k)]) == S"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$$\n",
    "P = \\sum_{j=0}^{k-1}f(x_j)\\prod_{i=0;i\\neq j}^{k-1}\\frac{{x_i}}{{x_i}-{x_j}}\n",
    "$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Feldman-VSS"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In cryptography, a secret sharing scheme is verifiable if auxiliary information is included that allows players to verify their shares as consistent. More formally, verifiable secret sharing ensures that even if the dealer is malicious there is a well-defined secret that the players can later reconstruct. (In standard secret sharing, the dealer is assumed to be honest.) The concept of verifiable secret sharing (VSS) was first introduced in 1985 by Benny Chor, Shafi Goldwasser, Silvio Micali and Baruch Awerbuch. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In a VSS protocol a distinguished player who wants to share the secret is referred to as the dealer. The protocol consists of two phases: a **sharing phase** and a **reconstruction phase**. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "A commonly used example of a simple **VSS** scheme is the protocol by Paul **Feldman**, which is based on Shamir's secret sharing scheme combined with any homomorphic encryption scheme. This scheme is, at best, secure for computationally bounded adversaries only."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "First, a cyclic group $G$ of prime order $p$, along with a generator $g$ of $G$, is chosen publicly as a system parameter. \n",
    "\n",
    "The group $G$ must be chosen such that computing discrete logarithms is hard in this group."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "from zkp_playground.types.algebra.concrete import FiniteFieldCyclicSecp256k1 as CF\n",
    "from zkp_playground.types.algebra.concrete import EllipticCurveCyclicSubgroupSecp256k1 as ECC\n",
    "\n",
    "G = ECC.G"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To make these shares verifiable, the dealer distributes commitments to the coefficients of $P$. \n",
    "\n",
    "If $P(x) = s + a_1x + ... + a_tx^t$, then the commitments that must be given are: "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$$\n",
    "c_0 = g^s\\\\\n",
    "c_1 = g^{a_1}\\\\\n",
    "\\vdots\\\\\n",
    "c_t=g^{a_t}\n",
    "$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Once these are given, any party can verify their share. For instance, to verify that $v = P(i) \\mod q$, party $i$ can check that \n",
    "$$\n",
    "{\\displaystyle g^{v}=c_{0}c_{1}^{i}c_{2}^{i^{2}}\\cdots c_{t}^{i^{t}}=\\prod _{j=0}^{t}c_{j}^{i^{j}}=\\prod _{j=0}^{t}g^{a_{j}i^{j}}=g^{\\sum _{j=0}^{t}a_{j}i^{j}}=g^{P(i)}}.\n",
    "$$\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "from zkp_playground.crypto.ssss import SSSS\n",
    "from zkp_playground.types.algebra.utils import randfield\n",
    "from zkp_playground.types.algebra.meta import field\n",
    "from zkp_playground.numbers.primes import generate_prime\n",
    "from functools import reduce\n",
    "from operator import mul\n",
    "import random\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "k = 3\n",
    "n = k * 3\n",
    "secret = randfield(CF)\n",
    "poly_params = [randfield(CF) for _ in range(k - 1)]\n",
    "poly_proofs = [G**p for p in ([secret] + poly_params)]\n",
    "s = SSSS(CF, secret, k, n, poly_params=poly_params)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "shares = [s.join() for _ in range(k)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "def verify(x, y):\n",
    "    return G ** y == reduce(mul, [poly_proofs[i] ** (x ** i) for i in range(k)])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "assert all([verify(*s) for s in shares])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Homomorphic property"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1. If we add/multiply a constant to all secret shares (y-values) then this constant will be add/multiplyied to the secret to get new secret"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "from zkp_playground.crypto.ssss import SSSS\n",
    "from zkp_playground.const import SECP256K1_P as P\n",
    "from zkp_playground.types.algebra.utils import randfield\n",
    "from zkp_playground.types.algebra.meta import field\n",
    "import random\n",
    "\n",
    "\n",
    "F = field(P)\n",
    "k = random.randint(1, 100)\n",
    "n = k * 3\n",
    "secret = randfield(F)\n",
    "s = SSSS(F, secret, k, n)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "shares = [s.join() for _ in range(k+1)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "mul_s = [[s[0], s[1] * 3] for s in shares]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "assert SSSS.decrypt(mul_s) == secret * 3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "add_s = [[s[0], s[1] + 3] for s in shares]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "assert SSSS.decrypt(add_s) == secret + 3"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "2. Suppose we have two secrets $s$ and $t$. Their corresponding shares are $f(1),\\cdots,f(n)$ for poly $f(x)$ and $g(1),\\cdots,g(n)$ for poly g(x). Now we define $j^{th}$ share as $f(j)+g(i)$,$(j \\in [1\\cdots n])$. New secret will be $s+t$ for the new function $h(x)=f(x)+g(x)$ since $h(0)=f(0)+g(0)$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "F = field(P)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "x, y = randfield(F), randfield(F)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "ss_x = SSSS(F, x, k, n)\n",
    "ss_y = SSSS(F, y, k, n)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "shares_x = [ss_x.join(i) for i in range(1, k+2)]\n",
    "shares_y = [ss_y.join(i) for i in range(1, k+2)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "comb_s = [[s[0][0], s[0][1] + s[1][1]] for s in zip(shares_x, shares_y)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "assert SSSS.decrypt(comb_s) == x + y"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Implementation"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### SSSS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "from zkp_playground.crypto.ssss import SSSS\n",
    "from zkp_playground.const import SECP256K1_P as P\n",
    "from zkp_playground.types.algebra.utils import randfield\n",
    "from zkp_playground.types.algebra.meta import field\n",
    "import random\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "k = random.randint(1, 100)\n",
    "n = k * 3\n",
    "secret = randfield(F)\n",
    "s = SSSS(field(P), secret, k, n)\n",
    "\n",
    "assert s.decrypt([s.join() for _ in range(k - 1)]) != secret\n",
    "assert s.decrypt([s.join() for _ in range(k+1)]) == secret\n",
    "assert s.decrypt([s.join() for _ in range(k + 1)]) == secret\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Feldman-VSS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "from zkp_playground.crypto.vss import VSS\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "G = ECC.G\n",
    "k = random.randint(1, 100)\n",
    "n = k * 3\n",
    "secret = randfield(CF)\n",
    "s = VSS(G, CF, secret, k, n)\n",
    "assert s.decrypt([s.join() for _ in range(k - 1)]) != secret\n",
    "assert s.decrypt([s.join() for _ in range(k+1)]) == secret\n",
    "assert s.decrypt([s.join() for _ in range(k + 1)]) == secret\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "assert s.verify(*s.join())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Refs\n",
    "\n",
    "* Discusses about SSSS on ECDSA https://news.ycombinator.com/item?id=7981936\n",
    "\n",
    "* Shamir's Secret Sharing https://en.wikipedia.org/wiki/Shamir%27s_Secret_Sharing\n",
    "\n",
    "* Verifiable secret sharing https://en.wikipedia.org/wiki/Verifiable_secret_sharing\n",
    "\n",
    "* Feldmanâ€™s scheme http://cryptowiki.net/index.php?title=Feldman%E2%80%99s_scheme\n",
    "\n",
    "* Understanding Feldman's VSS with a simple example https://crypto.stackexchange.com/questions/6637/understanding-feldmans-vss-with-a-simple-example"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
